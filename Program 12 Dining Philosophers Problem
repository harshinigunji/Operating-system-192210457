#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define NUM_PHILOSOPHERS 5
#define NUM_FORKS 5
pthread_mutex_t forks[NUM_FORKS];
pthread_t philosophers[NUM_PHILOSOPHERS];
void *philosopher(void *arg) {
    int philosopher_id = *(int *)arg;
    int left_fork = philosopher_id;
    int right_fork = (philosopher_id + 1) % NUM_FORKS;
    while (1) {
        // Thinking
        printf("Philosopher %d is thinking\n", philosopher_id);
        // Pick up forks
        pthread_mutex_lock(&forks[left_fork]);
        pthread_mutex_lock(&forks[right_fork]);
        // Eating
        printf("Philosopher %d is eating\n", philosopher_id);
        // Put down forks
        pthread_mutex_unlock(&forks[left_fork]);
        pthread_mutex_unlock(&forks[right_fork]);
    }
    return NULL;
}
int main() {
    int i;
    int philosopher_ids[NUM_PHILOSOPHERS];
    // Initialize mutex locks for forks
    for (i = 0; i < NUM_FORKS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }
    // Create threads for philosophers
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }
    // Join threads
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    // Destroy mutex locks for forks
    for (i = 0; i < NUM_FORKS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }
    return 0;
}
