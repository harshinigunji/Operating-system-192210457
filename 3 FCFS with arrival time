#include <stdio.h>
struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;
};
void fcfsScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrivalTime) {
            currentTime = processes[i].arrivalTime;
        }
        processes[i].waitingTime = currentTime - processes[i].arrivalTime;
        processes[i].completionTime = currentTime + processes[i].burstTime;
        currentTime = processes[i].completionTime;
        processes[i].turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
    }
}
int main() {
    int n;
    struct Process processes[10];
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        processes[i].id = i + 1;
    }
    fcfsScheduling(processes, n);
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrivalTime, processes[i].burstTime, processes[i].completionTime, processes[i].waitingTime, processes[i].turnaroundTime);
    }
    double averageWaitingTime = 0;
	double averageTurnaroundTime = 0;
	for (int i = 0; i < n; i++) {
	    averageWaitingTime += processes[i].waitingTime;
        averageTurnaroundTime += processes[i].turnaroundTime;
		}
		averageWaitingTime /= n;
		averageTurnaroundTime /= n;
		printf("Average Waiting Time: %.2lf\n", averageWaitingTime);
		printf("Average Turnaround Time: %.2lf\n", averageTurnaroundTime);
		return 0;
}
