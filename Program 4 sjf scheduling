#include <stdio.h>
struct Process {
    int id;
    int burstTime;
    int arrivalTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;
};
void sjfScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int shortestJobIndex;
    while (completed < n) {
        shortestJobIndex = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].completionTime == 0) {
                if (shortestJobIndex == -1 || processes[i].burstTime < processes[shortestJobIndex].burstTime) {
                    shortestJobIndex = i;
                }
            }
        }
        if (shortestJobIndex == -1) {
            currentTime++;
        } else {
            processes[shortestJobIndex].completionTime = currentTime + processes[shortestJobIndex].burstTime;
            processes[shortestJobIndex].turnaroundTime = processes[shortestJobIndex].completionTime - processes[shortestJobIndex].arrivalTime;
            processes[shortestJobIndex].waitingTime = processes[shortestJobIndex].turnaroundTime - processes[shortestJobIndex].burstTime;

            currentTime = processes[shortestJobIndex].completionTime;
            completed++;
        }
    }
}
int main() {
    int n;
    struct Process processes[10];
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the burst time and arrival time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        processes[i].id = i + 1;
    }
    sjfScheduling(processes, n);
    printf("\nProcess\tBurst Time\tArrival Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burstTime, processes[i].arrivalTime, processes[i].completionTime, processes[i].waitingTime, processes[i].turnaroundTime);
    }
    return 0;
}
